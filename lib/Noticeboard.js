import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Container, ListGroup } from 'reactstrap';
import './Noticeboard.css';
import qs from 'qs';
import NoticeboardItem from './NoticeboardItem';

const TicketsNoTickets = () => {
  return React.createElement("div", {
    className: "no-tickets"
  });
};

const ONE_MINUTE = 1000 * 60;

const buildQuery = opts => {
  let q = {};

  if (opts.order_by) {
    q['order_by'] = opts.order_by;
  }

  if (opts.order_type) {
    q['order_type'] = opts.order_type;
  }

  if (!opts.displayResolved) {
    q['filter'] = "new_and_my_open";
  }

  if (opts.updated_since) {
    q['updated_since'] = opts.updated_since;
  }

  if (opts.limit >= 0) {
    q['per_page'] = '' + opts.limit;
  }

  if (opts.page > 1) {
    q['page'] = '' + opts.page;
  }

  return q;
};

const fetchResponse = (subdomain, auth, opts) => {
  return axios.get(`https://${subdomain}.freshdesk.com/api/v2/tickets`, {
    auth: auth,
    params: {
      include: 'requester,description',
      ...buildQuery(opts)
    },
    paramsSerializer: function (params) {
      return qs.stringify(params, {
        arrayFormat: 'brackets',
        encoder: function (str) {
          // Passed in values `a`, `b`, `c`
          return typeof str === 'string' ? str.trim().replace(/\s+/g, '%20') : str;
        }
      });
    }
  }).then(response => response.data).catch(err => {
    console.error(err.stack);
    return [];
  });
};

const Noticeboard = ({
  children,
  auth = {},
  subdomain = '',
  displayResolved = true,
  updated_since = "1970-01-01",
  limit = -1,
  page = 0,
  order_by = "created_at",
  order_type = "desc",
  noTickets
}) => {
  const [response, setResponse] = useState([]);
  useEffect(() => {
    let update;

    const updateFunc = () => {
      fetchResponse(subdomain, auth, {
        order_by,
        order_type,
        displayResolved,
        updated_since,
        limit,
        page
      }).then(resp => limit >= 0 ? resp.slice(0, limit) : resp).then(resp => setResponse(resp));
      update = setTimeout(() => {
        updateFunc();
      }, 5 * ONE_MINUTE);
    };

    updateFunc();
    return () => {
      clearTimeout(update);
    }; // fetchResponse(subdomain, auth, {order_by, order_type, updated_since, displayResolved, limit, page})
    //   .then(resp => setResponse(resp))
    // ;
  }, [subdomain, auth, order_by, order_type, displayResolved, updated_since, limit, page]);
  const fsItem = children || NoticeboardItem;
  const NoTickets = noTickets || TicketsNoTickets; // console.log(fsItem);

  return React.createElement(ListGroup, {
    className: "tickets"
  }, response.length ? response.map(ticket => fsItem({
    ticket,
    key: ticket.id
  })) : NoTickets());
};

export default Noticeboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL05vdGljZWJvYXJkLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIkNvbnRhaW5lciIsIkxpc3RHcm91cCIsInFzIiwiTm90aWNlYm9hcmRJdGVtIiwiVGlja2V0c05vVGlja2V0cyIsIk9ORV9NSU5VVEUiLCJidWlsZFF1ZXJ5Iiwib3B0cyIsInEiLCJvcmRlcl9ieSIsIm9yZGVyX3R5cGUiLCJkaXNwbGF5UmVzb2x2ZWQiLCJ1cGRhdGVkX3NpbmNlIiwibGltaXQiLCJwYWdlIiwiZmV0Y2hSZXNwb25zZSIsInN1YmRvbWFpbiIsImF1dGgiLCJnZXQiLCJwYXJhbXMiLCJpbmNsdWRlIiwicGFyYW1zU2VyaWFsaXplciIsInN0cmluZ2lmeSIsImFycmF5Rm9ybWF0IiwiZW5jb2RlciIsInN0ciIsInRyaW0iLCJyZXBsYWNlIiwidGhlbiIsInJlc3BvbnNlIiwiZGF0YSIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwic3RhY2siLCJOb3RpY2Vib2FyZCIsImNoaWxkcmVuIiwibm9UaWNrZXRzIiwic2V0UmVzcG9uc2UiLCJ1cGRhdGUiLCJ1cGRhdGVGdW5jIiwicmVzcCIsInNsaWNlIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImZzSXRlbSIsIk5vVGlja2V0cyIsImxlbmd0aCIsIm1hcCIsInRpY2tldCIsImtleSIsImlkIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLElBQWdCQyxRQUFoQixFQUEwQkMsU0FBMUIsUUFBMkMsT0FBM0M7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FDRUMsU0FERixFQUVFQyxTQUZGLFFBR08sWUFIUDtBQUlBLE9BQU8sbUJBQVA7QUFDQSxPQUFPQyxFQUFQLE1BQWUsSUFBZjtBQUNBLE9BQU9DLGVBQVAsTUFBNEIsbUJBQTVCOztBQUVBLE1BQU1DLGdCQUFnQixHQUFHLE1BQU07QUFDN0IsU0FB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O0FBQXJCLEtBQ0d5QixRQUFRLENBQUNtQixNQUFULEdBQ0duQixRQUFRLENBQUNvQixHQUFULENBQWNDLE1BQUQsSUFBWUosTUFBTSxDQUFDO0FBQUNJLElBQUFBLE1BQUQ7QUFBU0MsSUFBQUEsR0FBRyxFQUFFRCxNQUFNLENBQUNFO0FBQXJCLEdBQUQsQ0FBL0IsQ0FESCxHQUVHTCxTQUFTLEVBSGYsQ0FESjtBQU9ELENBbEREOztBQW9EQSxlQUFlWCxXQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHtcbiAgQ29udGFpbmVyLFxuICBMaXN0R3JvdXBcbn0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQgJy4vTm90aWNlYm9hcmQuY3NzJztcbmltcG9ydCBxcyBmcm9tICdxcyc7XG5pbXBvcnQgTm90aWNlYm9hcmRJdGVtIGZyb20gJy4vTm90aWNlYm9hcmRJdGVtJztcblxuY29uc3QgVGlja2V0c05vVGlja2V0cyA9ICgpID0+IHtcbiAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT1cIm5vLXRpY2tldHNcIiAvPik7XG59XG5cbmNvbnN0IE9ORV9NSU5VVEUgPSAxMDAwICogNjA7XG5cbmNvbnN0IGJ1aWxkUXVlcnkgPSAob3B0cykgPT4ge1xuICBsZXQgcSA9IHt9O1xuICBpZiAob3B0cy5vcmRlcl9ieSkge1xuICAgIHFbJ29yZGVyX2J5J10gPSBvcHRzLm9yZGVyX2J5O1xuICB9XG4gIGlmIChvcHRzLm9yZGVyX3R5cGUpIHtcbiAgICBxWydvcmRlcl90eXBlJ10gPSBvcHRzLm9yZGVyX3R5cGU7XG4gIH1cbiAgaWYgKCFvcHRzLmRpc3BsYXlSZXNvbHZlZCkge1xuICAgIHFbJ2ZpbHRlciddID0gXCJuZXdfYW5kX215X29wZW5cIjtcbiAgfVxuICBpZiAob3B0cy51cGRhdGVkX3NpbmNlKSB7XG4gICAgcVsndXBkYXRlZF9zaW5jZSddID0gb3B0cy51cGRhdGVkX3NpbmNlO1xuICB9XG4gIGlmIChvcHRzLmxpbWl0ID49IDApIHtcbiAgICBxWydwZXJfcGFnZSddID0gJycgKyBvcHRzLmxpbWl0O1xuICB9XG4gIGlmIChvcHRzLnBhZ2UgPiAxKSB7XG4gICAgcVsncGFnZSddID0gJycgKyBvcHRzLnBhZ2U7XG4gIH1cblxuICByZXR1cm4gcTtcbn07XG5cbmNvbnN0IGZldGNoUmVzcG9uc2UgPSAoc3ViZG9tYWluLCBhdXRoLCBvcHRzKSA9PiB7XG4gIHJldHVybiBheGlvcy5nZXQoYGh0dHBzOi8vJHtzdWJkb21haW59LmZyZXNoZGVzay5jb20vYXBpL3YyL3RpY2tldHNgLCB7XG4gICAgYXV0aDogYXV0aCxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGluY2x1ZGU6ICdyZXF1ZXN0ZXIsZGVzY3JpcHRpb24nLFxuICAgICAgLi4uYnVpbGRRdWVyeShvcHRzKVxuICAgIH0sXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgcmV0dXJuIHFzLnN0cmluZ2lmeShwYXJhbXMsIHtcbiAgICAgICAgYXJyYXlGb3JtYXQ6ICdicmFja2V0cycsIGVuY29kZXI6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAvLyBQYXNzZWQgaW4gdmFsdWVzIGBhYCwgYGJgLCBgY2BcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBzdHIudHJpbSgpLnJlcGxhY2UoL1xccysvZywgJyUyMCcpIDogc3RyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sXG4gIH0pLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuZGF0YSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnN0YWNrKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9KTtcbn07XG5cbmNvbnN0IE5vdGljZWJvYXJkID0gKFxuICB7XG4gICAgY2hpbGRyZW4sXG4gICAgYXV0aCA9IHt9LFxuICAgIHN1YmRvbWFpbiA9ICcnLFxuICAgIGRpc3BsYXlSZXNvbHZlZCA9IHRydWUsXG4gICAgdXBkYXRlZF9zaW5jZSA9IFwiMTk3MC0wMS0wMVwiLFxuICAgIGxpbWl0ID0gLTEsXG4gICAgcGFnZSA9IDAsXG4gICAgb3JkZXJfYnkgPSBcImNyZWF0ZWRfYXRcIixcbiAgICBvcmRlcl90eXBlID0gXCJkZXNjXCIsXG4gICAgbm9UaWNrZXRzXG4gIH1cbikgPT4ge1xuXG4gIGNvbnN0IFtyZXNwb25zZSwgc2V0UmVzcG9uc2VdID0gdXNlU3RhdGUoW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHVwZGF0ZTtcbiAgICBjb25zdCB1cGRhdGVGdW5jID0gKCkgPT4ge1xuICAgICAgZmV0Y2hSZXNwb25zZShzdWJkb21haW4sIGF1dGgsIHtvcmRlcl9ieSwgb3JkZXJfdHlwZSwgZGlzcGxheVJlc29sdmVkLCB1cGRhdGVkX3NpbmNlLCBsaW1pdCwgcGFnZX0pXG4gICAgICAgIC50aGVuKHJlc3AgPT4gbGltaXQgPj0gMCA/IHJlc3Auc2xpY2UoMCwgbGltaXQpIDogcmVzcClcbiAgICAgICAgLnRoZW4ocmVzcCA9PiBzZXRSZXNwb25zZShyZXNwKSlcbiAgICAgIDtcbiAgICAgIHVwZGF0ZSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB1cGRhdGVGdW5jKCk7XG4gICAgICB9LCA1ICogT05FX01JTlVURSk7XG4gICAgfTtcblxuICAgIHVwZGF0ZUZ1bmMoKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodXBkYXRlKTtcbiAgICB9XG4gICAgLy8gZmV0Y2hSZXNwb25zZShzdWJkb21haW4sIGF1dGgsIHtvcmRlcl9ieSwgb3JkZXJfdHlwZSwgdXBkYXRlZF9zaW5jZSwgZGlzcGxheVJlc29sdmVkLCBsaW1pdCwgcGFnZX0pXG4gICAgLy8gICAudGhlbihyZXNwID0+IHNldFJlc3BvbnNlKHJlc3ApKVxuICAgIC8vIDtcblxuICB9LCBbc3ViZG9tYWluLCBhdXRoLCBvcmRlcl9ieSwgb3JkZXJfdHlwZSwgZGlzcGxheVJlc29sdmVkLCB1cGRhdGVkX3NpbmNlLCBsaW1pdCwgcGFnZV0pO1xuXG4gIGNvbnN0IGZzSXRlbSA9IGNoaWxkcmVuIHx8IE5vdGljZWJvYXJkSXRlbTtcbiAgY29uc3QgTm9UaWNrZXRzID0gbm9UaWNrZXRzIHx8IFRpY2tldHNOb1RpY2tldHM7XG4gIC8vIGNvbnNvbGUubG9nKGZzSXRlbSk7XG4gIHJldHVybiAoXG4gICAgICA8TGlzdEdyb3VwIGNsYXNzTmFtZT1cInRpY2tldHNcIj5cbiAgICAgICAge3Jlc3BvbnNlLmxlbmd0aFxuICAgICAgICAgID8gcmVzcG9uc2UubWFwKCh0aWNrZXQpID0+IGZzSXRlbSh7dGlja2V0LCBrZXk6IHRpY2tldC5pZH0pKVxuICAgICAgICAgIDogTm9UaWNrZXRzKCl9XG4gICAgICA8L0xpc3RHcm91cD5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTm90aWNlYm9hcmQ7XG4iXX0=