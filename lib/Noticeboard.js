import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Container, ListGroup } from 'reactstrap';
import './Noticeboard.css';
import qs from 'qs';
import NoticeboardItem from './NoticeboardItem';
const ONE_MINUTE = 1000 * 60;

const buildQuery = opts => {
  let q = {};

  if (opts.order_by) {
    q['order_by'] = opts.order_by;
  }

  if (opts.order_type) {
    q['order_type'] = opts.order_type;
  }

  if (!opts.displayResolved) {
    q['filter'] = "new_and_my_open";
  }

  if (opts.updated_since) {
    q['updated_since'] = opts.updated_since;
  }

  if (opts.limit > 0) {
    q['per_page'] = '' + opts.limit;
  }

  if (opts.page > 1) {
    q['page'] = '' + opts.page;
  }

  return q;
};

const fetchResponse = (subdomain, auth, opts) => {
  return axios.get(`https://${subdomain}.freshdesk.com/api/v2/tickets`, {
    auth: auth,
    params: {
      include: 'requester,description',
      ...buildQuery(opts)
    },
    paramsSerializer: function (params) {
      return qs.stringify(params, {
        arrayFormat: 'brackets',
        encoder: function (str) {
          // Passed in values `a`, `b`, `c`
          return typeof str === 'string' ? str.trim().replace(/\s+/g, '%20') : str;
        }
      });
    }
  }).then(response => response.data).catch(err => {
    console.error(err.stack);
    return [];
  });
};

const Noticeboard = ({
  children,
  auth = {},
  subdomain = '',
  displayResolved = true,
  updated_since = "1970-01-01",
  limit = -1,
  page = 0,
  order_by = "created_at",
  order_type = "desc"
}) => {
  const [response, setResponse] = useState([]);
  useEffect(() => {
    let update;

    const updateFunc = () => {
      fetchResponse(subdomain, auth, {
        order_by,
        order_type,
        displayResolved,
        updated_since,
        limit,
        page
      }).then(resp => setResponse(resp));
      update = setTimeout(() => {
        updateFunc();
      }, 5 * ONE_MINUTE);
    };

    updateFunc();
    return () => {
      clearTimeout(update);
    }; // fetchResponse(subdomain, auth, {order_by, order_type, updated_since, displayResolved, limit, page})
    //   .then(resp => setResponse(resp))
    // ;
  }, [subdomain, auth]);
  const fsItem = children || NoticeboardItem;
  console.log(fsItem);
  return React.createElement(ListGroup, null, response.map(ticket => fsItem({
    ticket,
    key: ticket.id
  })));
};

export default Noticeboard;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21wb25lbnRzL05vdGljZWJvYXJkLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJheGlvcyIsIkNvbnRhaW5lciIsIkxpc3RHcm91cCIsInFzIiwiTm90aWNlYm9hcmRJdGVtIiwiT05FX01JTlVURSIsImJ1aWxkUXVlcnkiLCJvcHRzIiwicSIsIm9yZGVyX2J5Iiwib3JkZXJfdHlwZSIsImRpc3BsYXlSZXNvbHZlZCIsInVwZGF0ZWRfc2luY2UiLCJsaW1pdCIsInBhZ2UiLCJmZXRjaFJlc3BvbnNlIiwic3ViZG9tYWluIiwiYXV0aCIsImdldCIsInBhcmFtcyIsImluY2x1ZGUiLCJwYXJhbXNTZXJpYWxpemVyIiwic3RyaW5naWZ5IiwiYXJyYXlGb3JtYXQiLCJlbmNvZGVyIiwic3RyIiwidHJpbSIsInJlcGxhY2UiLCJ0aGVuIiwicmVzcG9uc2UiLCJkYXRhIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJzdGFjayIsIk5vdGljZWJvYXJkIiwiY2hpbGRyZW4iLCJzZXRSZXNwb25zZSIsInVwZGF0ZSIsInVwZGF0ZUZ1bmMiLCJyZXNwIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImZzSXRlbSIsImxvZyIsIm1hcCIsInRpY2tldCIsImtleSIsImlkIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLElBQWdCQyxRQUFoQixFQUEwQkMsU0FBMUIsUUFBMkMsT0FBM0M7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsU0FDRUMsU0FERixFQUVFQyxTQUZGLFFBR08sWUFIUDtBQUlBLE9BQU8sbUJBQVA7QUFDQSxPQUFPQyxFQUFQLE1BQWUsSUFBZjtBQUNBLE9BQU9DLGVBQVAsTUFBNEIsbUJBQTVCO0FBRUEsTUFBTUMsVUFBVSxHQUFHLE9BQU8sRUFBMUI7O0FBRUEsTUFBTUMsVUFBVSxHQUFJQyxJQUFELElBQVU7QUFDM0IsTUFBSUMsQ0FBQyxHQUFHLEVBQVI7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QWtCO0FBQUNSLFFBQUFBLFFBQUQ7QUFBV0MsUUFBQUEsVUFBWDtBQUF1QkMsUUFBQUEsZUFBdkI7QUFBd0NDLFFBQUFBLGFBQXhDO0FBQXVEQyxRQUFBQSxLQUF2RDtBQUE4REMsUUFBQUE7QUFBOUQsT0FBbEIsQ0FBYixDQUNHYyxJQURILENBQ1FhLElBQUksSUFBSUgsV0FBVyxDQUFDRyxJQUFELENBRDNCO0FBR0FGLE1BQUFBLE1BQU0sR0FBR0csVUFBVSxDQUFDLE1BQU07QUFDeEJGLFFBQUFBLFVBQVU7QUFDWCxPQUZrQixFQUVoQixJQUFJbkMsVUFGWSxDQUFuQjtBQUdELEtBUEQ7O0FBU0FtQyxJQUFBQSxVQUFVO0FBRVYsV0FBTyxNQUFNO0FBQ1hHLE1BQUFBLFlBQVksQ0FBQ0osTUFBRCxDQUFaO0FBQ0QsS0FGRCxDQWJjLENBZ0JkO0FBQ0E7QUFDQTtBQUVELEdBcEJRLEVBb0JOLENBQUN2QixTQUFELEVBQVlDLElBQVosQ0FwQk0sQ0FBVDtBQXNCQSxRQUFNMkIsTUFBTSxHQUFHUCxRQUFRLElBQUlqQyxlQUEzQjtBQUNBNkIsRUFBQUEsT0FBTyxDQUFDWSxHQUFSLENBQVlELE1BQVo7QUFDQSxTQUNJLG9CQUFDLFNBQUQsUUFDR2YsUUFBUSxDQUFDaUIsR0FBVCxDQUFjQyxNQUFELElBQVlILE1BQU0sQ0FBQztBQUFDRyxJQUFBQSxNQUFEO0FBQVNDLElBQUFBLEdBQUcsRUFBRUQsTUFBTSxDQUFDRTtBQUFyQixHQUFELENBQS9CLENBREgsQ0FESjtBQUtELENBN0NEOztBQStDQSxlQUFlYixXQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHtcbiAgQ29udGFpbmVyLFxuICBMaXN0R3JvdXBcbn0gZnJvbSAncmVhY3RzdHJhcCc7XG5pbXBvcnQgJy4vTm90aWNlYm9hcmQuY3NzJztcbmltcG9ydCBxcyBmcm9tICdxcyc7XG5pbXBvcnQgTm90aWNlYm9hcmRJdGVtIGZyb20gJy4vTm90aWNlYm9hcmRJdGVtJztcblxuY29uc3QgT05FX01JTlVURSA9IDEwMDAgKiA2MDtcblxuY29uc3QgYnVpbGRRdWVyeSA9IChvcHRzKSA9PiB7XG4gIGxldCBxID0ge307XG4gIGlmIChvcHRzLm9yZGVyX2J5KSB7XG4gICAgcVsnb3JkZXJfYnknXSA9IG9wdHMub3JkZXJfYnk7XG4gIH1cbiAgaWYgKG9wdHMub3JkZXJfdHlwZSkge1xuICAgIHFbJ29yZGVyX3R5cGUnXSA9IG9wdHMub3JkZXJfdHlwZTtcbiAgfVxuICBpZiAoIW9wdHMuZGlzcGxheVJlc29sdmVkKSB7XG4gICAgcVsnZmlsdGVyJ10gPSBcIm5ld19hbmRfbXlfb3BlblwiO1xuICB9XG4gIGlmIChvcHRzLnVwZGF0ZWRfc2luY2UpIHtcbiAgICBxWyd1cGRhdGVkX3NpbmNlJ10gPSBvcHRzLnVwZGF0ZWRfc2luY2U7XG4gIH1cbiAgaWYgKG9wdHMubGltaXQgPiAwKSB7XG4gICAgcVsncGVyX3BhZ2UnXSA9ICcnICsgb3B0cy5saW1pdDtcbiAgfVxuICBpZiAob3B0cy5wYWdlID4gMSkge1xuICAgIHFbJ3BhZ2UnXSA9ICcnICsgb3B0cy5wYWdlO1xuICB9XG5cbiAgcmV0dXJuIHE7XG59O1xuXG5jb25zdCBmZXRjaFJlc3BvbnNlID0gKHN1YmRvbWFpbiwgYXV0aCwgb3B0cykgPT4ge1xuICByZXR1cm4gYXhpb3MuZ2V0KGBodHRwczovLyR7c3ViZG9tYWlufS5mcmVzaGRlc2suY29tL2FwaS92Mi90aWNrZXRzYCwge1xuICAgIGF1dGg6IGF1dGgsXG4gICAgcGFyYW1zOiB7XG4gICAgICBpbmNsdWRlOiAncmVxdWVzdGVyLGRlc2NyaXB0aW9uJyxcbiAgICAgIC4uLmJ1aWxkUXVlcnkob3B0cylcbiAgICB9LFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHJldHVybiBxcy5zdHJpbmdpZnkocGFyYW1zLCB7XG4gICAgICAgIGFycmF5Rm9ybWF0OiAnYnJhY2tldHMnLCBlbmNvZGVyOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgLy8gUGFzc2VkIGluIHZhbHVlcyBgYWAsIGBiYCwgYGNgXG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gc3RyLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICclMjAnKSA6IHN0cjtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9LFxuICB9KS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmRhdGEpXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjayk7XG4gICAgICByZXR1cm4gW107XG4gICAgfSk7XG59O1xuXG5jb25zdCBOb3RpY2Vib2FyZCA9IChcbiAge1xuICAgIGNoaWxkcmVuLFxuICAgIGF1dGggPSB7fSxcbiAgICBzdWJkb21haW4gPSAnJyxcbiAgICBkaXNwbGF5UmVzb2x2ZWQgPSB0cnVlLFxuICAgIHVwZGF0ZWRfc2luY2UgPSBcIjE5NzAtMDEtMDFcIixcbiAgICBsaW1pdCA9IC0xLFxuICAgIHBhZ2UgPSAwLFxuICAgIG9yZGVyX2J5ID0gXCJjcmVhdGVkX2F0XCIsXG4gICAgb3JkZXJfdHlwZSA9IFwiZGVzY1wiXG4gIH1cbikgPT4ge1xuXG4gIGNvbnN0IFtyZXNwb25zZSwgc2V0UmVzcG9uc2VdID0gdXNlU3RhdGUoW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHVwZGF0ZTtcbiAgICBjb25zdCB1cGRhdGVGdW5jID0gKCkgPT4ge1xuICAgICAgZmV0Y2hSZXNwb25zZShzdWJkb21haW4sIGF1dGgsIHtvcmRlcl9ieSwgb3JkZXJfdHlwZSwgZGlzcGxheVJlc29sdmVkLCB1cGRhdGVkX3NpbmNlLCBsaW1pdCwgcGFnZX0pXG4gICAgICAgIC50aGVuKHJlc3AgPT4gc2V0UmVzcG9uc2UocmVzcCkpXG4gICAgICA7XG4gICAgICB1cGRhdGUgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdXBkYXRlRnVuYygpO1xuICAgICAgfSwgNSAqIE9ORV9NSU5VVEUpO1xuICAgIH07XG5cbiAgICB1cGRhdGVGdW5jKCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHVwZGF0ZSk7XG4gICAgfVxuICAgIC8vIGZldGNoUmVzcG9uc2Uoc3ViZG9tYWluLCBhdXRoLCB7b3JkZXJfYnksIG9yZGVyX3R5cGUsIHVwZGF0ZWRfc2luY2UsIGRpc3BsYXlSZXNvbHZlZCwgbGltaXQsIHBhZ2V9KVxuICAgIC8vICAgLnRoZW4ocmVzcCA9PiBzZXRSZXNwb25zZShyZXNwKSlcbiAgICAvLyA7XG5cbiAgfSwgW3N1YmRvbWFpbiwgYXV0aF0pO1xuXG4gIGNvbnN0IGZzSXRlbSA9IGNoaWxkcmVuIHx8IE5vdGljZWJvYXJkSXRlbTtcbiAgY29uc29sZS5sb2coZnNJdGVtKTtcbiAgcmV0dXJuIChcbiAgICAgIDxMaXN0R3JvdXA+XG4gICAgICAgIHtyZXNwb25zZS5tYXAoKHRpY2tldCkgPT4gZnNJdGVtKHt0aWNrZXQsIGtleTogdGlja2V0LmlkfSkpfVxuICAgICAgPC9MaXN0R3JvdXA+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vdGljZWJvYXJkO1xuIl19