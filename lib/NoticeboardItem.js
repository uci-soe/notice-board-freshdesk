import React from 'react';
import { Row, Col, ListGroupItem } from 'reactstrap';
import './NoticeboardItem.css';
import moment from 'moment';
export default function NoticeboardItem({
  ticket
}) {
  const parseDates = UTCDate => {
    let m = moment(UTCDate).format('llll');
    return m;
  };

  const displayContent = desp_text => {
    if (desp_text.length <= 250) {
      return desp_text;
    } else {
      return desp_text.substring(0, 250) + "...";
    }
  };

  const displayTags = tags => {
    if (tags.length === 0) {
      return React.createElement("div", {
        className: "fr-empty"
      });
    } else {
      return tags.map(name => React.createElement("div", {
        className: "fr-tag"
      }, name));
    }
  };

  const displayStatus = status => {
    let status_text = "";

    switch (status) {
      case 2:
        status_text = "OPEN";
        break;

      case 3:
        status_text = "PENDING";
        break;

      case 4:
        status_text = "RESOLVED";
        break;

      case 5:
        status_text = "CLOSED";
        break;

      default:
        status_text = "None";
    }

    return React.createElement("div", {
      className: "fr-ticket-property"
    }, status_text);
  };

  const displayPriority = priority => {
    switch (priority) {
      case 2:
        return React.createElement("div", {
          className: "fr-priority medium"
        });

      case 3:
        return React.createElement("div", {
          className: "fr-priority high"
        });

      default:
        return React.createElement("div", {
          className: "fr-priority low"
        });
    }
  };

  return React.createElement(ListGroupItem, {
    className: "freshdesk-list fr-ticket-item",
    key: ticket.id
  }, displayPriority(ticket.priority), React.createElement(Row, null, React.createElement(Col, {
    xs: "8"
  }, React.createElement("div", {
    className: "fr-title"
  }, ticket.subject), React.createElement("div", {
    className: "fr-description"
  }, displayContent(ticket.description_text))), React.createElement(Col, {
    xs: "4"
  }, React.createElement(Row, null, React.createElement(Col, {
    xs: "12"
  }, React.createElement("div", {
    className: "fr-requester"
  }, ticket.requester.name))), React.createElement(Row, null, React.createElement(Col, {
    xs: "12"
  }, React.createElement("div", {
    className: "fr-date"
  }, parseDates(ticket.created_at)))), React.createElement(Row, {
    style: {
      padding: "0.5rem 0 0.3rem 0"
    }
  }, React.createElement(Col, {
    xs: "4"
  }, "Tags:"), React.createElement(Col, {
    xs: "8",
    className: "fr-tags"
  }, displayTags(ticket.tags))), React.createElement(Row, null, React.createElement(Col, {
    xs: "4"
  }, "Status:"), React.createElement(Col, {
    xs: "8"
  }, displayStatus(ticket.status))))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,